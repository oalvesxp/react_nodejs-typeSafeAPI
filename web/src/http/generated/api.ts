/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * typed full-stack
 * OpenAPI spec version: 1.0.0
 */
export type DeleteUser404 = {
  message: string;
};

/**
 * @nullable
 */
export type DeleteUser204 = typeof DeleteUser204[keyof typeof DeleteUser204] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUser204 = {
  null: 'null',
} as const;

export type UpdateUser404 = {
  message: string;
};

/**
 * @nullable
 */
export type UpdateUser204 = typeof UpdateUser204[keyof typeof UpdateUser204] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUser204 = {
  null: 'null',
} as const;

export type UpdateUserBody = {
  name: string;
};

export type GetUser404 = {
  message: string;
};

export type GetUser200 = {
  id: string;
  name: string;
};

export type ListUsers200Item = {
  id: string;
  name: string;
};

/**
 * @nullable
 */
export type CreateUser201 = typeof CreateUser201[keyof typeof CreateUser201] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUser201 = {
  null: 'null',
} as const;

export type CreateUserBody = {
  name: string;
};



/**
 * register users
 */
export type createUserResponse = {
  data: CreateUser201;
  status: number;
  headers: Headers;
}

export const getCreateUserUrl = () => {


  return `http://localhost:3333/users`
}

export const createUser = async (createUserBody: CreateUserBody, options?: RequestInit): Promise<createUserResponse> => {
  
  const res = await fetch(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createUserBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * list users
 */
export type listUsersResponse = {
  data: ListUsers200Item[];
  status: number;
  headers: Headers;
}

export const getListUsersUrl = () => {


  return `http://localhost:3333/users`
}

export const listUsers = async ( options?: RequestInit): Promise<listUsersResponse> => {
  
  const res = await fetch(getListUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * list an user by id
 */
export type getUserResponse = {
  data: GetUser200;
  status: number;
  headers: Headers;
}

export const getGetUserUrl = (id: string,) => {


  return `http://localhost:3333/users/${id}`
}

export const getUser = async (id: string, options?: RequestInit): Promise<getUserResponse> => {
  
  const res = await fetch(getGetUserUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * update user register
 */
export type updateUserResponse = {
  data: UpdateUser204;
  status: number;
  headers: Headers;
}

export const getUpdateUserUrl = (id: string,) => {


  return `http://localhost:3333/users/${id}`
}

export const updateUser = async (id: string,
    updateUserBody: UpdateUserBody, options?: RequestInit): Promise<updateUserResponse> => {
  
  const res = await fetch(getUpdateUserUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateUserBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * delete an user by id
 */
export type deleteUserResponse = {
  data: DeleteUser204;
  status: number;
  headers: Headers;
}

export const getDeleteUserUrl = (id: string,) => {


  return `http://localhost:3333/users/${id}`
}

export const deleteUser = async (id: string, options?: RequestInit): Promise<deleteUserResponse> => {
  
  const res = await fetch(getDeleteUserUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



